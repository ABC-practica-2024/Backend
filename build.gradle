plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'ro.ubb'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = '0.8.9'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'



	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
}

//tasks.named('test') {
//	useJUnitPlatform()
//}

// test with reports and coverage
test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // Generate the report after tests are run
}

jacocoTestReport {
	dependsOn test // Make sure tests run before generating the report
	reports {
		html.required.set(true) // Generate HTML report
		xml.required.set(true)  // Optionally generate XML report
	}
	sourceDirectories.setFrom(files(['src/main/java']))
	classDirectories.setFrom(
			files([
					fileTree(dir: 'build/classes/java/main').matching {
						include '**/ubb/abc2024/biology/service/**'
					}
			])
	)
	executionData.setFrom(fileTree(dir: 'build', includes: ['jacoco/test.exec']))
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}
}

tasks.withType(Test).configureEach {
	jacoco {
		excludes = ['org/jcp/xml/dsig/internal/**'] // Exclude problematic classes
	}
}
